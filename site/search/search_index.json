{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"0-introducing-xdn/","title":"XDN: Replicating Stateful Service at the Edge","text":""},{"location":"0-introducing-xdn/#what-is-xdn","title":"What is XDN?","text":"<p>XDN is a research prototype to upgrade CDN</p> <p>XDN aims to distribute and replicate stateful services at the network edge for lower latency and better availability. XDN is a major upgrade from the existing CDN technology that only supports static content (the C in CDN). The X in XDN represents any services, either stateless or stateful.</p> <p>CDN was developed for the early Internet, often called Web 1.0, when most websites primarily serve static contents. Today\u2019s modern web applications are dynamic and interactive, requiring stateful interactions that CDNs were not designed to handle efficiently.</p> <p>XDN is being developed for replicating and distributing stateful web services at the network edge. There are four main design goals to make XDN as effective as, or better than, existing CDN:</p> <ul> <li>XDN needs to handle blackbox service without knowing much of the service's implementation details. That means,   the containerized stateful service can be written in any language (e.g., Go, Python, C++, etc) and can use any   persistence datastore (e.g., MySQL, PostgreSQL, MongoDB, ordinary files).</li> <li>XDN needs to offer flexible consistency, allowing the web service developers to specify the consistency model for   their replicated web service. We currently support 9 models: <code>LINEARIZABLE</code>, <code>SEQUENTIAL</code>,   <code>CAUSAL</code>, <code>EVENTUAL</code>, <code>PRAM</code> or <code>FIFO</code>, <code>READ_YOUR_WRITES</code>, <code>MONOTONIC_READS</code>, <code>MONOTONIC_WRITES</code>,   <code>WRITES_FOLLOW_READS</code>. Additionally, XDN provides an API for brave developers to create custom   coordination/replication protocol, though we warn you that implementing correct distributed protocols is hard \ud83d\ude01.</li> <li>XDN needs to have minimal overhead beyond replication. While custom-built web services with tightly-coupled    replication protocols may perform better than XDN's general approach, the performance gap should be minimal.</li> <li>XDN needs to support amoebic placement by putting the replicas closer to user demands, ensuring low latency   similar to CDN while maintaining the requested consistency guarantees.</li> </ul> <p></p> <p>Check out our getting started page to know how to deploy a blackbox stateful service on XDN.</p>"},{"location":"0-introducing-xdn/#getting-started","title":"Getting started","text":"<ul> <li>Start by replicating a service: deploying a bookcatalog service.</li> <li>Consider other consistency models: predifined models or create custom protocols.</li> <li>Specifying what you have and want, not how to achieve it: declarative replication.</li> </ul>"},{"location":"0-introducing-xdn/#research-summary","title":"Research summary","text":"<p>Problem.  Existing CDN technology can only distribute static contents or stateless services at the network edge, CDN cannot replicate stateful services. That is problematic because modern websites commonly are stateful, they are dynamic and interactive, requiring state management. It would be nice if developers could replicate their user-facing stateful service at the edge, without any modification, the same as CDN which generally does not require modifying the distributed content.</p> <p>Hypothesis.  We can have an efficient edge replication platform for blackbox stateful services by only knowing (1) the service and its operation properties, (2) the requested consistency model, and (3) where the persistent state is written on the disk.</p> <p>Results.  Indeed, we can efficiently replicate and distribute blackbox stateful service at the edge! We built XDN, with the following properties:  (1) able to handle blackbox,  (2) offers flexible consistency,  (3) has low overhead,  (4) offers amoebic placement. Achieving those properties requiring us to design a specification language to capture the service and its operations' properties. XDN also needs to transparently capture the written state on disk, which it does using FUSE, to handle blackbox service and provide efficient replica movement with low overhead. </p>"},{"location":"0-introducing-xdn/#limitations","title":"Limitations","text":"<ul> <li>XDN only supports stateful service that persists its state on disk, an alternative design requires app developer to   implement their own snapshot mechanism, a non-blackbox approach.</li> <li>The current implementation only considers stateful web service with an HTTP interface (i.e., RESTful web service).</li> <li>Static and only one consistency model per web service.</li> </ul>"},{"location":"1-getting-started/","title":"Getting started with XDN","text":"<p>Info</p> <p>This page explains how to deploy a blackbox stateful service on an existing XDN provider.</p>"},{"location":"1-getting-started/#deploy-a-blackbox-service","title":"Deploy a blackbox service","text":"<p>First, get the client binary, <code>xdn</code>, by cloning our Github repository.</p> <pre><code>git clone https://github.com/fadhilkurnia/xdn\ncd xdn/bin/\nexport PATH=$(pwd):$PATH\n</code></pre> <p>Then check that you can successfully run the client binary. <pre><code>xdn --help\n</code></pre></p> <p>Tip</p> <p>We use x86 Linux machine by default.  For ARM64 machine, such as MacBook with Apple Silicon, go to <code>xdn/bin/arm64</code> directory instead.</p> <p>Finally, launch a blackbox stateful service on XDN. Let's use <code>bookcatalog</code> as the service name. <pre><code>xdn launch bookcatalog \\\n   --image=fadhilkurnia/xdn-bookcatalog \\ \n   --port=80 \\\n   --consistency=linearizable \\\n   --deterministic=true \\\n   --state=/app/data/\n</code></pre> If successful, you will see the following output below, then you can access the stateful service by visiting http://bookcatalog.xdnapp.com/.    <pre><code>Launching bookcatalog service with the following configuration:\n  docker image  : fadhilkurnia/xdn-bookcatalog\n  http port     : 80\n  consistency   : linearizable\n  deterministic : true\n  state dir     : /app/data/\n\nThe service is successfully launched \ud83c\udf89\ud83d\ude80\nAccess your service at the following permanent URL:\n  &gt; http://bookcatalog.xdnapp.com/\n\n\nRetrieve the service's replica locations with this command:\n  xdn service info bookcatalog\nDestroy the replicated service with this command:\n  xdn service destroy bookcatalog\n</code></pre></p> <p>Let's dechiper what just happened when we deploy a stateful service with the command above.</p> <ul> <li>Blackbox Service. XDN handles arbitrary stateful service, the <code>--image</code> specifies the Docker image of the   containerized service. XDN doesn't need to know how and with what programming language the service was implemented.</li> <li>HTTP Interface. XDN acts as proxy for all incoming HTTP request, so XDN can coordinate the requests among the    replicas. The <code>--port</code> option specifies the port where the service listen to incoming HTTP requests. When unspecified,   XDN asssumes the default HTTP port of 80.</li> <li>Service Properties. The <code>--deterministic</code> option specifies whether the web service is deterministic or not. Other   than determinism, XDN allows developer to specify other properties of the service and its requests so XDN can use an   optimized replication protocol, depending on the service's properties.</li> <li>Consistency Model. The <code>--consistency</code> option specifies the consistency model the developer wants for the   replicated service. The default value is <code>linearizable</code>. Check out this page to see how   to use different consistency model.</li> <li>State Directory. The <code>--state</code> option specifies the directory where the web service stores its state. For example,   it is commonly <code>/var/lib/mysql</code> in MySQL and <code>/var/lib/pgsql/data</code> in PostgreSQL. When not specified, XDN will    snapshot the entire data in the container <code>/</code>. </li> <li>XDN Provider. Here, we are using an existing XDN provider, accessible at <code>xdnapp.com</code>. You can use another XDN   Provider using <code>--control-plane=&lt;control_plane_url&gt;</code> option. Alternatively, you can be your own XDN Provider! check   out this page.</li> </ul>"},{"location":"1-getting-started/#other-example-services","title":"Other example services","text":"<p>Other than the <code>fadhilkurnia/xdn-bookcatalog</code> Docker image that we use previously, we have prepared Docker images for other stateful services, as can be seen below.</p> Docker Image Description Example Launch Command fadhilkurnia/xdn-bookcatalog Book catalog web app, storing updatable list of books. Tech: Go, SQLite. <pre><code>xdn launch alice-catalog \\\n     --image=fadhilkurnia/xdn-bookcatalog \\\n     --state=/data/ \\\n     --deterministic\n</code></pre> fadhilkurnia/xdn-bookcatalog-nd Book catalog web app that is non-deterministic because it stores the update timestamp. Tech: Go, SQLite. <pre><code>xdn launch bob-catalog \\\n    --image=fadhilkurnia/xdn-bookcatalog-nd \\\n    --state=/data/\n</code></pre> fadhilkurnia/xdn-tpcc App for a wholesale parts supplier that owns multiple warehouse, implementing the TPC-C benchmark. Tech: Python, SQLite. <pre><code>xdn launch charlie-tpcc \\\n    --image=fadhilkurnia/xdn-tpcc \\\n    --state=/app/data/\n</code></pre> fadhilkurnia/xdn-todo Todo application, enabling users to list and modify their todo items. Tech: NodeJS, SQLite. <pre><code>xdn launch charlie-tpcc \\\n    --image=fadhilkurnia/xdn-todo \\\n    --state=/home/node/app/var/db\n</code></pre> Coming soon: movie review app Coming soon: smallbank app Coming soon: e-commerce Coming soon: social network app Coming soon: hotel reservation app Coming soon: SEATSStonebreaker ElectronicAirline Ticketing System (SEATS) Coming soon: KV App (YCSB) Coming soon: NoOp"},{"location":"1-getting-started/#deploy-a-multi-container-service","title":"Deploy a multi-container service","text":"<p>Some stateful service have multiple containers, typically having frontend, backend, and database in their own container.</p> <p>XDN supports deployment of stateful service with multiple containers. Developers need to specify the properties of the service, including the containers of that service.  An example of that service properties declaration is shown below, in <code>wordpress.yaml</code> file. <pre><code># wordpress.yaml\n---\nname: myblog\ncomponents:\n   - wordpress:\n        image: wordpress:6.5.4-fpm-alpine\n        port: 80\n        entry: true\n        environments:\n           - WORDPRESS_CONFIG_EXTRA:\n                define('FORCE_SSL_ADMIN', false);\n                define('FORCE_SSL_LOGIN', false);\n   - database:\n        image: mysql:8.4.0\n        expose: 3306\n        stateful: true\n        environments:\n           - MYSQL_ROOT_PASSWORD: supersecret\ndeterministic: false\nstate: database:/var/lib/mysql/\nconsistency: linearizability\n</code></pre></p> <p>Then, to deploy that multi-container service, use the following command: <pre><code>xdn launch myblog --file=wordpress.yaml\n</code></pre> If successful, you wil see the following output. <pre><code>Launching bookcatalog service with the following configuration:\n  docker image  : wordpress:6.5.4-fpm-alpine,mysql:8.4.0\n  http port     : 80\n  consistency   : linearizable\n  deterministic : false\n  state dir     : database:/var/lib/mysql/\n\nThe service is successfully launched \ud83c\udf89\ud83d\ude80\nAccess your service at the following permanent URL:\n  &gt; http://myblog.xdnapp.com/\n\n\nRetrieve the service's replica locations with this command:\n  xdn service info myblog\nDestroy the replicated service with this command:\n  xdn service destroy myblog\n</code></pre></p> <p>Limitations:</p> <ul> <li>XDN only supports at most one stateful container. Multiple stateful container requires snapshot transaction support,   currently unimplemented.</li> <li>XDN only supports at most one entry container. Supporting multiple entry containers require developer to declare the   ports of all those entry containers, making the specification more complex. Currently, this feature is not a priority   for XDN.</li> </ul>"},{"location":"2-become-operator/","title":"Deploying your own XDN cluster","text":""},{"location":"2-become-operator/#single-machine-deployment","title":"Single machine deployment","text":""},{"location":"2-become-operator/#installing-dependencies","title":"Installing dependencies","text":""},{"location":"2-become-operator/#editing-the-config","title":"Editing the config","text":""},{"location":"2-become-operator/#starting-the-cluster","title":"Starting the cluster","text":""},{"location":"2-become-operator/#distributed-deployment","title":"Distributed deployment","text":""},{"location":"2-become-operator/#using-an-existing-xdn-provider","title":"Using an existing XDN Provider","text":""},{"location":"2-become-operator/#becoming-an-xdn-provider","title":"Becoming an XDN Provider","text":""},{"location":"2-become-operator/#replicate-blackbox-service-with-existing-xdn-provider","title":"Replicate Blackbox Service with Existing XDN Provider","text":"<p>We have prepared an XDN Provider with deployed Control Plane and Replication Plane using machines on CloudLab.</p> <ol> <li>Get the xdn command-line tool (<code>xdn</code>), for deploying the blackbox service.<ul> <li>From pre-compiled binaries</li> <li>Compile from source code</li> </ul> </li> <li>Make sure</li> </ol>"},{"location":"2-become-operator/#distributed-deployment_1","title":"Distributed deployment","text":""},{"location":"2-become-operator/#_1","title":"Deployment","text":""},{"location":"3-flexible-consistency/","title":"Flexible consistency in XDN","text":"<p>Tip</p> <p>Developer can specify the intended consistency model, or even implement custom replication protocol with the provided API.</p>"},{"location":"3-flexible-consistency/#predefined-consistency-models","title":"Predefined consistency models","text":""},{"location":"3-flexible-consistency/#linearizable","title":"Linearizable","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#sequential","title":"Sequential","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#causal","title":"Causal","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#eventual","title":"Eventual","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#pram","title":"PRAM","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#read-your-writes","title":"Read your writes","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#writes-follow-reads","title":"Writes follow reads","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#monotonic-reads","title":"Monotonic reads","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#monotonic-writes","title":"Monotonic writes","text":"<p>TBD</p>"},{"location":"3-flexible-consistency/#custom-replication-protocol","title":"Custom replication protocol","text":"<p>Note</p> <p>Informally, a consistency model provides gurantees on what are valid values observable from the read requests.  Replication protocol is the one that ensures the guarantee is satisfied and never broken by preventing invalid observations (i.e., upholding the safety property).</p> <p>TBD</p> <p>Note</p> <p>Replication protocol is commonly also referred as Coordination or Synchronization protocol. It is a class of  Distributed Protocol that manage the state in all the replicas, ensuring convergence.   </p>"},{"location":"4-how-xdn-work/","title":"The architecture of XDN","text":""},{"location":"5-service-properties/","title":"Declaring service properties for XDN","text":"<p>Declarative Replication</p> <p>XDN embraces declarative replication, relieving the app developers to know in detail how the replication happen. Developers only need to declare the what, specifically the service and its operations properties: whether it is deterministic or not, set of commutative operations, nil-external operations, read-only operations etc; and the  intended consistency model.</p>"},{"location":"5-service-properties/#determinism","title":"Determinism","text":""},{"location":"5-service-properties/#nil-external-operations","title":"Nil-external operations","text":""},{"location":"5-service-properties/#commutative-operations","title":"Commutative operations","text":""},{"location":"5-service-properties/#monotonic-operations","title":"Monotonic operations","text":""}]}